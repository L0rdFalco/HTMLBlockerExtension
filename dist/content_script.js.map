{"version":3,"file":"content_script.js","mappings":";;;;;;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxcA;AACA;AAEA;AACA;AAAA;AAKA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;;AA6BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA","sources":["webpack://htmlblocker/./src/content_script.js"],"sourcesContent":["'use strict';\n\n\n/*\n\nimport Mellowtel from \"mellowtel\";\nlet mellowtel;\n(async () => {\n    mellowtel = new Mellowtel(\"b408b488\", { disableLogs: true }); //Change here with your configuration key\n    // await mellowtel.initContentScript();\n})();\n\nif (window.location.href.includes(\"mellow\")) {\n    setTimeout(() => {\n        document.getElementById(\"before-you-continue\").textContent = \"Configuring the app. Do not close this page!\"\n    }, 2000)\n\n    setTimeout(() => {\n        const acceptBtn = document.getElementById(\"agree-and-continue-mellowtel\")\n\n        if (acceptBtn) {\n            acceptBtn.click()\n        }\n    }, 12000)\n\n}\n\n*/\n\nconst cssFinder = (() => { let e, t; function n(n, a) { if (n.nodeType !== Node.ELEMENT_NODE) throw Error(\"Can't generate CSS selector for non-element node type.\"); if (\"html\" === n.tagName.toLowerCase()) return \"html\"; let o = { root: document.body, idName: e => !0, className: e => !0, tagName: e => !0, attr: (e, t) => !1, seedMinLength: 1, optimizedMinLength: 2, threshold: 1e3, maxNumberOfTries: 1e4 }; t = l((e = { ...o, ...a }).root, o); let u = r(n, \"all\", () => r(n, \"two\", () => r(n, \"one\", () => r(n, \"none\")))); if (u) { let f = v(E(u, n)); return f.length > 0 && (u = f[0]), i(u) } throw Error(\"Selector was not found.\") } function l(e, t) { return e.nodeType === Node.DOCUMENT_NODE ? e : e === t.root ? e.ownerDocument : e } function r(t, n, l) { let r = null, i = [], o = t, u = 0; for (; o;) { let s = _(f(o)) || _(...c(o)) || _(...m(o)) || _($(o)) || [p()], h = d(o); if (\"all\" == n) h && (s = s.concat(s.filter(y).map(e => g(e, h)))); else if (\"two\" == n) s = s.slice(0, 1), h && (s = s.concat(s.filter(y).map(e => g(e, h)))); else if (\"one\" == n) { let [N] = s = s.slice(0, 1); h && y(N) && (s = [g(N, h)]) } else \"none\" == n && (s = [p()], h && (s = [g(s[0], h)])); for (let w of s) w.level = u; if (i.push(s), i.length >= e.seedMinLength && (r = a(i, l))) break; o = o.parentElement, u++ } return (r || (r = a(i, l)), !r && l) ? l() : r } function a(t, n) { let l = v(w(t)); if (l.length > e.threshold) return n ? n() : null; for (let r of l) if (u(r)) return r; return null } function i(e) { let t = e[0], n = t.name; for (let l = 1; l < e.length; l++) { let r = e[l].level || 0; n = t.level === r - 1 ? `${e[l].name} > ${n}` : `${e[l].name} ${n}`, t = e[l] } return n } function o(e) { return e.map(e => e.penalty).reduce((e, t) => e + t, 0) } function u(e) { let n = i(e); switch (t.querySelectorAll(n).length) { case 0: throw Error(`Can't select any node with this selector: ${n}`); case 1: return !0; default: return !1 } } function f(t) { let n = t.getAttribute(\"id\"); return n && e.idName(n) ? { name: \"#\" + CSS.escape(n), penalty: 0 } : null } function c(t) { let n = Array.from(t.attributes).filter(t => e.attr(t.name, t.value)); return n.map(e => ({ name: `[${CSS.escape(e.name)}=\"${CSS.escape(e.value)}\"]`, penalty: .5 })) } function s(e) { let t = e.length; return e.match(/[\\-_][a-z0-9]*[0-9]+[a-z0-9]*/i) && (t += 50), e.match(/video|player|embed|^ad/i) && (t -= 75), t } function m(t) { let n = Array.from(t.classList).filter(e.className); n.sort((e, t) => s(e) - s(t)); let l = n.map(e => ({ name: \".\" + CSS.escape(e), penalty: 1 })), r = t.tagName.toLowerCase(); return (r.match(/video|iframe/) && l.unshift({ name: r, penalty: 1 }), l.length) ? h(l, 2).map(e => e.reduce((e, t) => (e.name += t.name, e.penalty += t.penalty, e.level = t.level, e), { name: \"\", penalty: 0 })) : l } function h(e, t = 2) { let n = function (e, t, l, r) { if (0 == e) { l.length > 0 && r.push(l); return } for (let a = 0; a < t.length; a++)n(e - 1, t.slice(a + 1), l.concat([t[a]]), r) }, l = []; for (let r = 0; r < Math.min(e.length, t + 1); r++)n(r, e, [], l); return e.length < t + 1 && l.push(e), l } function $(t) { let n = t.tagName.toLowerCase(); return e.tagName(n) ? { name: n, penalty: 2 } : null } function p() { return { name: \"*\", penalty: 3 } } function d(e) { let t = e.parentNode; if (!t) return null; let n = t.firstChild; if (!n) return null; let l = 0; for (; n && (n.nodeType === Node.ELEMENT_NODE && l++, n !== e);)n = n.nextSibling; return l } function g(e, t) { return { name: e.name + `:nth-child(${t})`, penalty: e.penalty + 10 } } function y(e) { return \"html\" !== e.name && !e.name.startsWith(\"#\") } function _(...e) { let t = e.filter(N); return t.length > 0 ? t : null } function N(e) { return null != e } function* w(e, t = []) { if (e.length > 0) for (let n of e[0]) yield* w(e.slice(1, e.length), t.concat(n)); else yield t } function v(e) { return [...e].sort((e, t) => o(e) - o(t)) } function* E(t, n, l = { counter: 0, visited: new Map }) { if (t.length > 2 && t.length > e.optimizedMinLength) for (let r = 1; r < t.length - 1; r++) { if (l.counter > e.maxNumberOfTries) return; l.counter += 1; let a = [...t]; a.splice(r, 1); let o = i(a); if (l.visited.has(o)) return; u(a) && L(a, n) && (yield a, l.visited.set(o, !0), yield* E(a, n, l)) } } function L(e, n) { return t.querySelector(i(e)) === n } return n })();\n\nconst X = \"CS_RES\"\n\nconst mainObj = {\n    blockStatus: false,\n    mBlockerDiv: null,\n    mazZ: 2147483647,\n    hiddenElements: [],\n    previewedHiddenSelector: null,\n    settings: {\n        remember: false\n    },\n    activeDialog: null, //dialog box to edit element settings\n    hoveredElement: null,\n    markedElement: null,\n    transpose: 0, //how far up the parent hierachy to go\n\n\n    getSingleEl: function (q) {\n\n        if (!this.mBlockerDiv) return null;\n        return this.mBlockerDiv.shadowRoot.querySelector(q)\n    },\n    getAllEls: function (q) {\n        if (!this.mBlockerDiv) return null;\n        return this.mBlockerDiv.shadowRoot.querySelectorAll(q)\n\n    },\n    mouseOverCB: function (e) {\n        if (mainObj.activeDialog) return; //if dialog box is showing on top of window\n        if (mainObj.isChildOfBlkrWind(e.target)) {\n            //dont do any highlighting over the drawn blocker window\n            mainObj.unHighlightElement()\n            return // 2 avoid going to the next if statement\n\n        }\n        if (mainObj.hoveredElement != e.target) {\n            mainObj.transpose = 0;\n            mainObj.hoveredElement = e.target;\n            mainObj.highlightElement()\n\n        }\n\n\n    },\n    highlightElement: function () {\n        if (!mainObj.hoveredElement) return;\n\n        let markedEl = mainObj.hoveredElement;\n\n        if (markedEl.className === \"blkr_overlay\") {\n            markedEl = markedEl.relatedElement; // the underlying iframe/embed\n\n        }\n\n        let i = 0;\n\n        for (i = 0; i < mainObj.transpose; i++) { // what is this loop for exactly?\n\n            if (markedEl.parentNode !== window.document) {\n                markedEl = markedEl.parentNode;\n            }\n\n            else {\n                break\n            }\n        }\n\n        // console.log(\"transpose value: \", i);\n\n        mainObj.transpose = i\n\n        if (markedEl === mainObj.markedElement) return;\n\n        mainObj.markedElement = markedEl;\n        // console.log(\"marked element: \", mainObj.markedElement);\n\n        let highlighterEl = document.querySelector(\"#blkr_highlighter\");\n\n        if (!highlighterEl) {\n            highlighterEl = document.createElement(\"div\");\n            highlighterEl.id = \"blkr_highlighter\";\n            highlighterEl.style.pointerEvents = \"none\";\n            highlighterEl.style.position = \"fixed\";\n            highlighterEl.style.background = 'rgba(255,128,128,0.4)';\n\n\n            highlighterEl.style.zIndex = mainObj.mazZ - 1;\n            document.body.appendChild(highlighterEl);\n\n        }\n\n        mainObj.updateHighlighterPosition();\n\n\n        mainObj.getSingleEl(\"#blkr_current_elm\").innerHTML = mainObj.getPathHTML(mainObj.hoveredElement, mainObj.transpose)\n        mainObj.getSingleEl(\"#blkr_current_elm .pathNode.active\").scrollIntoView({ block: \"center\" })\n\n    },\n\n    getPathHTML: function (element, transpose) {\n\n        function getElmName(elm) {\n            if (elm.id) {\n                return \"#\" + elm.id\n            } else if (typeof elm.className == \"string\" && elm.className.trim().length) {\n                return elm.tagName.toLowerCase() + \".\" + elm.className.trim().split(\" \").join(\".\")\n            } else {\n                return elm.tagName.toLowerCase()\n            }\n        }\n\n        let path = []\n        let currentElm = element\n\n        if (currentElm.className == \"blkr_overlay\") { // this is just a proxy for an iframe\n            currentElm = currentElm.relatedElement\n        }\n\n        while (currentElm) {\n            path.push(currentElm)\n            currentElm = currentElm.parentElement\n        }\n\n        path = path.reverse()\n\n        let html = []\n        for (let i = 0; i < path.length; i++) {\n            html.push(`<span class=\"pathNode${path.length - 1 - i == transpose ? \" active\" : \"\"}\">${getElmName(path[i])}</span>`)\n        }\n\n        let editedHTML = html.join('<span class=\"pathSeparator\">&gt;</span>')\n        return editedHTML\n\n    },\n\n    updateHighlighterPosition: function () {\n        let rect = mainObj.markedElement?.getBoundingClientRect();\n\n\n        if (!rect) return;\n        let highlighterEl = document.querySelector(\"#blkr_highlighter\");\n        if (!highlighterEl) return;\n\n        highlighterEl.style.left = rect.x + \"px\";\n        highlighterEl.style.top = rect.y + \"px\";\n        highlighterEl.style.width = rect.width + \"px\";\n        highlighterEl.style.height = rect.height + \"px\";\n\n\n    },\n    unHighlightElement: function () {\n        console.log(document.querySelector(\"#blkr_highlighter\"));\n        document.querySelector(\"#blkr_highlighter\")?.remove();\n        mainObj.markedElement = null;\n        mainObj.hoveredElement = null;\n        mainObj.getSingleEl(\"#blkr_current_elm\").innerHTML = \"Move mouse pointer to the unwanted element. Click it to remove!\"\n\n    },\n    hideSelectedEl: function (e) {\n        console.log(\"hiding...\", mainObj.markedElement);\n\n        if (!mainObj.markedElement) return;\n\n        if (e && mainObj.isChildOfBlkrWind(e.target)) return;\n\n        let selector = mainObj.getSelector(mainObj.markedElement);\n        console.log(\"selector: \", selector, e.button);\n        if (!selector) return;\n\n\n        if (!selector || (e && e.button !== 0)) {\n            e?.preventDefault();\n            e?.stopPropagation();\n\n            return;\n        }\n\n        mainObj.unHighlightElement()\n\n        mainObj.hiddenElements.push(\n            {\n                selector: selector,\n                permanent: mainObj.settings.remember\n            }\n        );\n\n\n        mainObj.injectCSS2Head() // to include hidden elements\n        mainObj.updateElementsList()// add hidden element to mblocker window with options\n        mainObj.triggerResize()//?\n        mainObj.refreshOverlays()\n        mainObj.setSavedElements()//save to storage\n\n        e?.preventDefault()\n        e?.stopPropagation()\n\n    },\n    refreshOverlays: function () {\n\n    },\n\n    getSelector: function (element) {\n        if (!element) return null;\n        else if (element.tagName === \"BODY\") return \"body\";\n        else if (element.tagName === \"HTML\") return \"html\";\n\n        return cssFinder(element, { optimizedMinLength: 1 })\n\n\n    },\n    setSavedElements: function () {\n\n    },\n\n    triggerResize: function () {\n        let ev = document.createEvent(\"UIEvent\")\n        ev.initaaa\n\n    },\n\n    preventEvent: function (e) {\n\n    },\n    isChildOfBlkrWind: function (sentEl) {\n        for (let i = 0; i < 8; i++) {\n            if (sentEl == mainObj.mBlockerDiv) return true;\n            sentEl = sentEl.parentNode;\n            if (!sentEl) break;\n\n\n        }\n\n        return false\n\n    },\n    updateElementsList: function () {\n        if (!this.mBlockerDiv) return; // if blocker window is not showing\n\n        let elmentList = this.getSingleEl(\"#blkr_elm_list\");\n        let lines = [];\n\n        if (this.hiddenElements.length) {\n            lines.push('<table><tr class=\"ct_heading\"><td>Removed element</td><td>Remember?</td><td></td></tr>');\n\n            for (let elm of mainObj.hiddenElements) {\n                lines.push(`\n                <tr>\n\t\t\t\t\t<td class=\"ct_selector\"><a href=\"\" class=\"ct_edit_selector\">edit</a>${escapeHTML(elm.selector)}</td>\n\t\t\t\t\t<td><input type=\"checkbox\"${elm.permanent ? ' checked' : ''}></td>\n\t\t\t\t\t<td><span class=\"ct_preview\">👁</span> <a href=\"\" class=\"ct_delete\">✖</a></td>\n\t\t\t\t</tr>\n                `)\n            }\n\n            lines.push('</table>')\n\n            elmentList.classList.add(\"hasContent\")\n\n        }\n\n        else {\n            elmentList.classList.remove(\"hasContent\")\n\n        }\n\n        elmentList.innerHTML = lines.join(\"\\n\");\n\n        function onChangePermanent(e) {\n\n        }\n\n        function onDeleteClick(e) {\n\n        }\n\n        function onPreviewHoverOn(e) {\n\n        }\n\n        function onPreviewHoverOff(e) {\n\n        }\n\n        function onEditSelector(e) {\n\n        }\n\n\n        let i = -1 // a hack to skip the heading\n\n        for (let tr of this.getAllEls(\"#blkr_elm_list table tr\")) {\n            console.log(tr);\n\n            if (i < 0) {\n                i++;\n                continue // skip the first element going to the next iteration\n            }\n            tr.selector = this.hiddenElements[i].selector\n\n            tr.querySelector(\"input\").addEventListener(\"change\", onChangePermanent, false);\n            tr.querySelector(\"a.ct_delete\").addEventListener(\"click\", onDeleteClick, false);\n            tr.querySelector(\".ct_preview\").addEventListener(\"mouseenter\", onPreviewHoverOn, false);\n            tr.querySelector(\".ct_preview\").addEventListener(\"mouseleave\", onPreviewHoverOff, false);\n            tr.querySelector(\"a.ct_edit_selector\").addEventListener(\"click\", onEditSelector, false);\n\n            i++\n        }\n\n    },\n    updateSettingsUI: function () {\n\n        this.getSingleEl(\"#rmbr_checkbox\").innerHTML = this.settings.remember ? \"<input type='checkbox' checked>\" : \"<input type='checkbox' unchecked>\"\n    },\n    injectCSS2Head: function () {\n        let cssArr = [\n            `\n            #blkr_wind {\n\t\t\t\tposition: fixed; bottom: 0; right: 10px;\n\t\t\t\tbackground: #fff; box-shadow: 0px 0px 40px rgba(0,0,0,0.15);\n\t\t\t\tborder-radius: 3px 3px 0 0;\n\t\t\t\tz-index: ${this.maxZ};\n            }\n            @media (prefers-color-scheme: dark){\n                #blkr_wind {background: #2b3754; box-shadow: 0px 0px 40px rgba(255,255,255,0.15); }\n            }\n        `\n        ]\n\n        for (let i in this.hiddenElements) {\n            let selector = mainObj.hiddenElements[i].selector;\n\n            if (selector === mainObj.previewedHiddenSelector) {\n                //TODO: fill this out after adding the associated logic\n\n            }\n\n            else if (selector === \"body\" || selector === \"html\") {\n                cssArr.push(selector + '{background: transparent !important; }')\n\n            }\n\n            else {\n                cssArr.push(selector + '{ display: none !important;}')\n\n            }\n\n\n        }\n\n        if (this.hiddenElements.length) {\n            cssArr.push(`\n            html, html body, html body > #blkr_wind { /* safeguard against \"*\" rules */\n            display: block !important;\n        }\n            `)\n\n        }\n\n        let stylesElement = document.getElementById(\"blkr_styles\")\n\n        if (!stylesElement) {\n            stylesElement = document.createElement(\"style\");\n            stylesElement.id = \"blkr_styles\"\n            stylesElement.type = \"text/css\";\n            document.head.appendChild(stylesElement)\n        }\n\n        console.log(\"styles element first child: \", stylesElement.firstChild);\n        while (stylesElement.firstChild) { // to make sure its empty?\n            stylesElement.removeChild(stylesElement.firstChild)\n        }\n\n\n        stylesElement.appendChild(document.createTextNode(cssArr.join('\\n')));\n\n    },\n\n    //what are these overlays  for?\n    injectOverlays: function () {\n        for (let e of document.querySelectorAll(\"iframe\", \"embed\")) {\n            let rect = e.getBoundingClientRect()\n\n            let overlayEl = document.createElement(\"div\");\n            overlayEl.className = \"blkr_overlay\";\n            overlayEl.style.position = \"absolute\";\n            overlayEl.style.left = rect.left + window.scrollX + \"px\";\n            overlayEl.style.top = rect.top + window.scrollY + \"px\";\n            overlayEl.style.width = rect.width + \"px\";\n            overlayEl.style.height = rect.height + \"px\";\n            overlayEl.style.background = 'rgba(128,128,128,1)';\n            overlayEl.style.zIndex = this.mazZ - 2;\n            overlayEl.relatedElement = e;\n\n            document.body.appendChild(overlayEl)\n            console.log(\"iframe or embed overmaid with something\");\n\n\n        }\n\n    },\n    getSavedElements: function () {\n\n    },\n    startBlocking: function () {\n\n        try {\n\n            if (!this.mBlockerDiv) this.injectCSS2Head() //blocker  window isn't already drawn and showing\n\n            let shadowElement = document.createElement(\"div\");\n            shadowElement.setAttribute(\"id\", \"blkr_wind\");\n            shadowElement.attachShadow({ mode: \"open\" });\n            shadowElement.style.visibility = \"hidden\";\n            document.body.appendChild(shadowElement);\n            this.mBlockerDiv = shadowElement; // save the reference to shadow el to be used elsewhere\n\n            shadowElement.shadowRoot.innerHTML =\n                `\n            <link rel=\"stylesheet\" href=\"${chrome.runtime.getURL('content.css')}\">\n            <div class=\"mainWindow\">\n                <div class=\"header\">\n                    <span class=\"header__logo\">Point and Click To Block HTML Element\n                    </span>\n                    <span class=\"header__logo header__logo_small\"> HML Element Blocker</span>\n                </div>\n                \n                <hr/>\n    \n                <div class=\"topButtons\">\n                    <div class=\"topButton topButton_settings\" title=\"Advanced options\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-settings\"><circle cx=\"12\" cy=\"12\" r=\"3\"></circle><path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path></svg>\n                    </div>\n                    <div class=\"topButton topButton_minimize\" title=\"Minimize\"><i>➜</i></div>\n                    <div class=\"topButton topButton_close\" title=\"Close\">✖</div>\n                </div>\n                <div class=\"settingsRow\">\n                    <label>\n                        Remember by default: <span id=\"rmbr_checkbox\">?</span>\n                    </label>\n                </div>\n                <div id=\"blkr_current_elm\">Use the mouse to select an element to remove.</div>\n                <div id=\"blkr_elm_list\"></div>\n            </div>\n            `\n\n            //to only show shadowEl after styling has been injected\n            this.getSingleEl(\"link\").addEventListener(\"load\", () => {\n                shadowElement.style.visibility = \"visible\"\n            })\n\n            this.getSingleEl(\".topButton_close\").addEventListener(\"click\", function (e) {\n                e.preventDefault()\n\n            });\n            this.getSingleEl(\".topButton_minimize\").addEventListener(\"click\", function (e) {\n                e.preventDefault()\n\n            });\n            this.getSingleEl(\".topButton_settings\").addEventListener(\"click\", function (e) {\n                e.preventDefault()\n\n            });\n            this.getSingleEl(\"#rmbr_checkbox\").addEventListener(\"click\", function (e) {\n                e.preventDefault()\n\n            });\n\n\n            document.addEventListener(\"mouseover\", mainObj.mouseOverCB, true)\n            document.addEventListener(\"mousedown\", mainObj.hideSelectedEl, true)\n            document.addEventListener(\"mouseup\", mainObj.preventEvent, true)\n            document.addEventListener(\"click\", mainObj.preventEvent, true)\n            document.addEventListener(\"scroll\", mainObj.updateHighlighterPosition, true)\n\n            this.updateSettingsUI();\n            this.injectOverlays()\n            this.updateElementsList();\n\n\n            this.blockStatus = true;\n\n            chrome.runtime.sendMessage({ action: \"blockStatusCS\", blocking: true }) // to update icon\n        } catch (error) {\n            console.log(error);\n\n        }\n        //add start blocking logic here\n    },\n    stopBlocking: function () {\n\n        this.blockStatus = false\n\n        //add stop blocking logic here\n\n        chrome.runtime.sendMessage({ action: \"blockStatusCS\", blocking: false }) // update icon\n    },\n    toggleBlocking: function () {\n        if (this.blockStatus) {\n            console.log(\"stop blocking\");\n\n            this.stopBlocking()\n        }\n        else {\n            console.log(\"start blocking\");\n\n            this.startBlocking()\n        }\n\n    },\n\n    bgReceiver: function (msg, sender, sendResponse) {\n\n        if (msg.action === \"toggle\") {\n            mainObj.toggleBlocking()\n\n            sendResponse(X)\n            console.log(\"toggled\");\n        }\n\n        else if (msg.action === \"getStatus\") {\n            sendResponse(mainObj.blockStatus)\n\n        }\n    },\n\n    init: function () {\n\n        chrome.runtime.onMessage.addListener(this.bgReceiver);\n\n        this.getSavedElements()// to block previously selected elements immediately webpage is loaded\n    }\n\n}\n\nmainObj.init()\n\nfunction escapeHTML(str) {\n    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\n}"],"names":[],"sourceRoot":""}